{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","fieldCells","querySelectorAll","gameScore","messageLose","messageWin","messageStart","board","playGame","score","mergedCells","prevBoard","endField","tenPercent","numTwo","randomNumbers","Math","floor","random","getRandomNumber","youLose","hasEmptyCell","hasSimilarNeibhour","row","col","JSON","stringify","generateRandomNumbers","classList","remove","i","createField","inRage","mergeAndMove","rowChange","colChange","kRow","kCol","cellMerged","add","addEventListener","updateBoard","cellMoved","setTimeout","moveRight","moveLeft","moveDown","moveUp","resetMergedCells","updateCell","cell","value","textContent","className","events","pressedKey","key","parse","contains"],"mappings":"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","file":"main.72d3e3af.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst fieldCells = document.querySelectorAll('.field_cell');\nconst gameScore = document.querySelector('.game-score');\nconst messageLose = document.querySelector('.message_lose');\nconst messageWin = document.querySelector('.message_win');\nconst messageStart = document.querySelector('.message_start');\nlet board = [];\nlet playGame = true;\nlet score = 0;\nlet mergedCells = [];\nlet prevBoard = [];\nconst endField = 4;\nconst tenPercent = 0.9;\nconst numTwo = 2;\n\nfunction randomNumbers() {\n  return Math.floor(Math.random() * endField);\n}\n\nfunction getRandomNumber() {\n  return Math.random() < tenPercent ? numTwo : endField;\n};\n\nfunction youLose() {\n  let hasEmptyCell = false;\n  let hasSimilarNeibhour = false;\n\n  for (let row = 0; row < endField; row++) {\n    for (let col = 0; col < endField; col++) {\n      if (board[row][col] === 0) {\n        hasEmptyCell = true;\n      }\n\n      if ((row - 1 >= 0 && board[row - 1][col] === board[row][col])\n        || (row + 1 < endField && board[row + 1][col] === board[row][col])\n        || (col - 1 >= 0 && board[row][col - 1] === board[row][col])\n        || (col + 1 < endField && board[row][col + 1] === board[row][col])) {\n        hasSimilarNeibhour = true;\n      }\n    }\n  }\n\n  if (hasEmptyCell && JSON.stringify(prevBoard) !== JSON.stringify(board)) {\n    generateRandomNumbers();\n  } else if (!hasSimilarNeibhour) {\n    messageLose.classList.remove('hidden');\n  }\n};\n\nfunction generateRandomNumbers() {\n  for (let i = 0; i < 1; i++) {\n    const row = randomNumbers();\n    const col = randomNumbers();\n\n    if (board[row][col] === 0) {\n      board[row][col] = getRandomNumber();\n    } else {\n      i--;\n    }\n  }\n};\n\nfunction createField() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  mergedCells = [\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n  ];\n};\n\nfunction inRage(row, col) {\n  if (row >= 0 && row < endField && col >= 0 && col < endField) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction mergeAndMove(row, col, rowChange, colChange) {\n  if (board[row][col] !== 0) {\n    let kRow = row + rowChange;\n    let kCol = col + colChange;\n\n    while (inRage(kRow, kCol) && board[kRow][kCol] === 0) {\n      kRow += rowChange;\n      kCol += colChange;\n    }\n\n    if (inRage(kRow, kCol) && board[kRow][kCol] === board[row][col]\n    && !mergedCells[kRow][kCol]) {\n      board[kRow][kCol] *= 2;\n      mergedCells[kRow][kCol] = true;\n\n      if (board[kRow][kCol] === 2048) {\n        messageWin.classList.remove('hidden');\n        playGame = false;\n      }\n      score += board[kRow][kCol];\n      board[row][col] = 0;\n\n      const cellMerged = fieldCells[kRow * endField + kCol];\n\n      cellMerged.classList.add('field_cell--merge');\n\n      cellMerged.addEventListener('animationend', () => {\n        cellMerged.classList.remove('field_cell--merge');\n        updateBoard();\n      });\n    } else {\n      kRow -= rowChange;\n      kCol -= colChange;\n      board[kRow][kCol] = board[row][col];\n\n      if (kRow !== row || kCol !== col) {\n        board[row][col] = 0;\n\n        const cellMoved = fieldCells[row * endField + col];\n\n        cellMoved.classList.add('field_cell--defaultMove');\n\n        if (colChange === 1) {\n          cellMoved.classList.add('field_cell--moveRight');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveRight');\n            updateBoard();\n          }, 200);\n        }\n\n        if (colChange === -1) {\n          cellMoved.classList.add('field_cell--moveLeft');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveLeft');\n            updateBoard();\n          }, 200);\n        }\n\n        if (rowChange === 1) {\n          cellMoved.classList.add('field_cell--moveDown');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveDown');\n            updateBoard();\n          }, 200);\n        }\n\n        if (rowChange === -1) {\n          cellMoved.classList.add('field_cell--moveUp');\n\n          setTimeout(() => {\n            cellMoved.classList.remove('field_cell--moveUp');\n            updateBoard();\n          }, 200);\n        }\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  for (let row = 0; row < endField; row++) {\n    for (let col = 2; col >= 0; col--) {\n      mergeAndMove(row, col, 0, 1);\n    }\n  }\n}\n\nfunction moveLeft() {\n  for (let row = 0; row < endField; row++) {\n    for (let col = 1; col < endField; col++) {\n      mergeAndMove(row, col, 0, -1);\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let col = 0; col < endField; col++) {\n    for (let row = 2; row >= 0; row--) {\n      mergeAndMove(row, col, 1, 0);\n    }\n  }\n}\n\nfunction moveUp() {\n  for (let col = 0; col < endField; col++) {\n    for (let row = 1; row < endField; row++) {\n      mergeAndMove(row, col, -1, 0);\n    }\n  }\n}\n\nfunction resetMergedCells() {\n  for (let row = 0; row < endField; row++) {\n    for (let col = 0; col < endField; col++) {\n      mergedCells[row][col] = false;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', events => {\n  if (playGame) {\n    const pressedKey = events.key;\n\n    prevBoard = JSON.parse(JSON.stringify(board));\n\n    switch (pressedKey) {\n      case 'ArrowUp': moveUp();\n        youLose();\n        resetMergedCells();\n        break;\n      case 'ArrowDown': moveDown();\n        youLose();\n        resetMergedCells();\n        break;\n      case 'ArrowLeft': moveLeft();\n        youLose();\n        resetMergedCells();\n        break;\n      case 'ArrowRight': moveRight();\n        youLose();\n        resetMergedCells();\n        break;\n    };\n  }\n});\n\nfunction updateCell(row, col) {\n  const cell = fieldCells[row * endField + col];\n  const value = board[row][col];\n\n  gameScore.textContent = score;\n\n  cell.textContent = value || '';\n\n  cell.className = 'field_cell';\n\n  if (value !== 0) {\n    cell.classList.add(`field_cell--${value}`);\n  }\n}\n\nfunction updateBoard() {\n  for (let row = 0; row < endField; row++) {\n    for (let col = 0; col < endField; col++) {\n      updateCell(row, col);\n    }\n  }\n};\n\nbutton.addEventListener('click', () => {\n  playGame = true;\n  messageStart.classList.add('hidden');\n\n  if (button.classList.contains('restart')) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n    playGame = false;\n    createField();\n  } else {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    playGame = true;\n    score = 0;\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    createField();\n    generateRandomNumbers();\n    generateRandomNumbers();\n  }\n\n  for (let row = 0; row < endField; row++) {\n    for (let col = 0; col < endField; col++) {\n      updateCell(row, col);\n    }\n  }\n});\n"]}